@implements IDisposable

@*//READ THIS BEFORE GRADING
//THIS CODE IN THIS FILE IS NOT IN USE AT ALL ANYWHERE IN THE PROJECT
//It is only here in a .cs file so I can more easily see and format it.
//The teams message cuts off the window so it's hard to see the code*@

<PageTitle>Home</PageTitle>

<h1>Raft Simulation</h1>

@if (!isRunning)
{
  <button class="btn btn-primary" @onclick=StartSimulation>Start Simulation</button>
}
else
{
  <button class="btn btn-danger" @onclick="StopNodes">Stop Simulation</button>
}

<div class="row">
  <div class="col">
    <div>

      <label for="speed">
        Election timeout between @(FormatMilliSeconds(150 * RaftNode.NodeIntervalScalar)) and @(FormatMilliSeconds(300 *
        RaftNode.NodeIntervalScalar)) seconds
        <br>
        <input type="range" id="speed" name="speed" min="1" max="150" @bind:event="oninput"
          @bind=RaftNode.NodeIntervalScalar @onchange=UpdateTimer />
      </label>
    </div>
    <div>

      <label for="NetworkRequestDelay">
        Network Delay @FormatMilliSeconds(RaftSimulationNode.NetworkRequestDelay) seconds
        <br>
        <input type="range" id="NetworkRequestDelay" name="NetworkRequestDelay" min="10" max="10000"
          @bind:event="oninput" @bind=RaftSimulationNode.NetworkRequestDelay />
      </label>
    </div>
  </div>
  <div class="col">
    <div class="border p-3 rounded-3">
      <label>
        Key <input class="form-control" @bind=userInputKey />
      </label>
      <label>
        Value <input class="form-control" @bind=userInputValue />
      </label>
      <hr>
      @foreach (var node in nodes)
      {
        <button class="btn btn-outline-primary mx-1" @onclick="() => SendCommand(node.Id)">Send to Node @node.Id</button>
      }
      <br>
      <div>
        @commandStatus
      </div>
    </div>
  </div>
</div>


<div class="row">
  @foreach (var node in nodes)
  {
    var timeoutRemaining = DateTime.Now - node.InnerNode.ElectionTimeout;
    var maxIntervalMilliseconds = 300 * RaftNode.NodeIntervalScalar;
    var percentageRemaining = (int)(100 * (Math.Abs(timeoutRemaining.TotalMilliseconds) / maxIntervalMilliseconds));

    <div class="p-3 col-4">
      <div class="border p-3 rounded-3">
        <div class="d-flex justify-content-between">
          <h3>
            Node @node.Id
          </h3>
          @if (node.SimulationRunning)
          {
            <button class="btn btn-outline-danger" @onclick="node.StopSimulationLoop">Stop Node</button>
          }
          else
          {
            <button class="btn btn-outline-primary" @onclick="node.StartSimulationLoop">Start Node</button>
          }
        </div>
        <div class="@StateClass(node)">
          @node.Status
        </div>
        <div class="@TermClass(node)">
          Term @node.CurrentTerm
        </div>
        <div>
          Leader is @node.CurrentTermLeader
        </div>
        <div>
          <div class="progress" role="progressbar" aria-label="Basic example"
            aria-valuenow=@(Math.Abs(timeoutRemaining.TotalMilliseconds)) aria-valuemin="0"
            aria-valuemax="@(maxIntervalMilliseconds)">
            <div class="progress-bar bg-dark-subtle" style="width: @percentageRemaining%;"></div>
          </div>

        </div>
        <div class="text-body-secondary text-break" style="height: 3em;">
          @node.Message
        </div>

        <div class="bg-body-secondary my-3 p-1 rounded-3">
          <strong>LOG</strong>
          @foreach (var (log, index) in node.InnerNode.Log.Select((l, i) => (l, i)))
          {
            <div class=@(index <= node.InnerNode.CommittedEntryIndex ? "text-success" : "")>
              @log.TermId - @log.Key: @log.Value
            </div>
          }
        </div>

        <div class="bg-body-secondary my-3 p-1 rounded-3">
          <strong>STATE</strong>
          @foreach (var entry in node.InnerNode.State)
          {
            <div>@entry.Key: @entry.Value</div>
          }
        </div>
      </div>
    </div>
  }
</div>


@code {
  List<RaftSimulationNode> nodes { get; set; } = [];
  string userInputKey = "";
  string userInputValue = "";
  string commandStatus = "";

  async Task SendCommand(int destinationId)
  {
    commandStatus = "sending";
    var dest = nodes.FirstOrDefault(n => n.Id == destinationId);

    var command = new ClientCommandData(
    Type: ClientCommandType.Set,
    Key: userInputKey,
    Value: userInputValue,
    RespondToClient: async (success, leaderId) =>
    {
      commandStatus = $"response was {success}, leader is {leaderId}";
    });
    await dest.SendCommand(command);
  }

  string TermClass(RaftSimulationNode node)
  {
    var maxTerm = nodes.Select(n => n.CurrentTerm).Max();
    if (maxTerm == node.CurrentTerm)
      return "text-primary";
    return "";
  }
  string StateClass(RaftSimulationNode node)
  {
    if (node.Status == NodeStatus.Leader)
      return "text-primary";
    if (node.Status == NodeStatus.Candidate)
      return "text-warning";
    if (node.Status == NodeStatus.Follower)
      return "text-body-secondary";
    return "";
  }
  bool isRunning = false;

  private Timer? timer;

  protected override void OnInitialized()
  {
    RaftNode.NodeIntervalScalar = 12;
  }

  void StartSimulation()
  {
    var node1 = new RaftNode([]) { Id = 1 };
    var node2 = new RaftNode([]) { Id = 2 };
    var node3 = new RaftNode([]) { Id = 3 };

    var simulationWrapper1 = new RaftSimulationNode(node1);
    var simulationWrapper2 = new RaftSimulationNode(node2);
    var simulationWrapper3 = new RaftSimulationNode(node3);

    node1.ClusterNodes = [simulationWrapper2, simulationWrapper3];
    node2.ClusterNodes = [simulationWrapper1, simulationWrapper3];
    node3.ClusterNodes = [simulationWrapper1, simulationWrapper2];

    nodes = [simulationWrapper1, simulationWrapper2, simulationWrapper3];

    simulationWrapper1.StartSimulationLoop();
    simulationWrapper2.StartSimulationLoop();
    simulationWrapper3.StartSimulationLoop();

    isRunning = true;
    timer = new Timer(_ =>
    {
      InvokeAsync(StateHasChanged);
    }, null, 0, 200);
  }

  public void UpdateTimer()
  {
    @* timer?.Dispose();
    timer = new Timer(_ =>
    {
      InvokeAsync(StateHasChanged);
    }, null, 0, 100 * (int)RaftNode.NodeIntervalScalar); *@
  }
  public void StopNodes()
  {
    foreach (var node in nodes)
    {
      node.StopSimulationLoop();
    }
    isRunning = false;
    StateHasChanged();
    timer?.Dispose();
    timer = null;
  }

  public void Dispose()
  {
    StopNodes();
  }

  public static string FormatTimeSpan(TimeSpan timeSpan)
  {
    double totalSeconds = timeSpan.TotalSeconds;
    return $"{totalSeconds:F1}";
  }

  public static string FormatMilliSeconds(double milliSeconds)
  {
    return $"{milliSeconds / 1000.0:F1}";
  }
}