@page "/"
@using RaftLibrary
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>

<button class="btn btn-primary" @onclick=StartSim>Start Simulation</button>


<div class="row">
    <div class="col">
        <div>
            <label for="speed">
                Election timeout between @(FormatMilliSeconds(150 * Node.NodeIntervalScalar)) and
                @(FormatMilliSeconds(300 *
                    Node.NodeIntervalScalar)) seconds
                <br>
                <input type="range" id="speed" name="speed" min="1" max="150" @bind:event="oninput"
                    @bind=Node.NodeIntervalScalar @onchange=UpdateTimer />
            </label>
        </div>
    </div>
</div>

<div class="row">
    @foreach (var node in nodes)
    {
        <div class="p-3 col-4">
            @node.Id
            <div>
                @node.InnerNode.State
            </div>

        </div>
    }
</div>


@code {
    List<SimNode> nodes = [];
    private Timer? timer;

    public void UpdateTimer()
    {
        timer?.Dispose();
        timer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 0, 100 * (int)Node.NodeIntervalScalar);
    }

    void StartSim()
    {
        var node1 = new Node([], 1); //consider initializing with other nodes and the own node id Node([], 1)
        var node2 = new Node([], 2); //consider initializing with other nodes and the own node id
        var node3 = new Node([], 3); //consider initializing with other nodes and the own node id

        var simulation1 = new SimNode(node1);
        var simulation2 = new SimNode(node2);
        var simulation3 = new SimNode(node3);

        node1.OtherNodes = [simulation2, simulation3];
        node2.OtherNodes = [simulation1, simulation3];
        node3.OtherNodes = [simulation1, simulation2];

        nodes = [simulation1, simulation2, simulation3];
        StateHasChanged();

        // node1.StartElection();
        // node2.StartElection();
        // node3.StartElection();
        timer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 0, 200);


    }






    public static string FormatMilliSeconds(double milliSeconds)
    {
        return $"{milliSeconds / 1000.0:F1}";
    }

}
