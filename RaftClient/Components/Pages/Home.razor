@page "/"
@rendermode InteractiveServer
@using System.Collections.Concurrent
@using RaftLibrary
@inject NodeDataService NodeDataService

@* <div> *@
@*     @foreach (var url in urls) *@
@*     { *@
@*         <div>@url</div> *@
@*     } *@
@* </div> *@




<button @onclick="sendEntry">Send entry</button>


@foreach (var nodeData in allNodeData)
{
    @if (nodeData is not null)
    {
        <div>Time remaining: @nodeData.ElectionTimeout</div>

        @* var timeoutRemaining = nodeData.ElectionTimeout;
        var maxIntervalMilliseconds = 300 * Node.NodeIntervalScalar;
        var percentageRemaining = (int)(100 * (Math.Abs(timeoutRemaining) / maxIntervalMilliseconds));

        <div>
            <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow=@(Math.Abs(timeoutRemaining))
                aria-valuemin="0" aria-valuemax="@(maxIntervalMilliseconds)">
                <div class="progress-bar bg-dark-subtle" style="width: @percentageRemaining%;"></div>
            </div>

        </div> *@

    }
}





@code {
    string userInputKey = "";
    string userInputValue = "";
    string[] urls = Environment.GetEnvironmentVariable("NODE_URLS").Split(',');

    NodeData[] allNodeData = new NodeData[3];
    private Timer? timer;


    protected override void OnInitialized()
    {
        timer = new Timer(async _ =>
        {
            await FetchData();
            await InvokeAsync(StateHasChanged);
        }, null, 0, 50);
    }

    private async Task FetchData()
    {
        var newNodeData = new NodeData[3];
        newNodeData[0] = await NodeDataService.GetDataFromApi1();
        newNodeData[1] = await NodeDataService.GetDataFromApi2();
        newNodeData[2] = await NodeDataService.GetDataFromApi3();

        await InvokeAsync(() =>
        {
            for(int i = 0; i < 3; i++)
            {
                allNodeData[i] = newNodeData[i]; 
            }
            StateHasChanged();
        });
        @* Console.WriteLine("Data has been fetched by client"); *@
    }

    public void Dispose()
    {
        timer?.Dispose();
    }


    async void sendEntry()
    {
        await NodeDataService.SendEntryToApi1(new RequestAppendEntriesData() { Entry = "What's up?" });
        allNodeData[0] = await NodeDataService.GetDataFromApi1();

    }



    public static string FormatMilliSeconds(double milliSeconds)
    {
        return $"{milliSeconds / 1000.0:F1}";
    }


}
