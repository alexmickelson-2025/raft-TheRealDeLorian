@page "/"
@rendermode InteractiveServer
@using System.Collections.Concurrent
@using RaftLibrary
@inject NodeDataService NodeDataService

@* <div> *@
@*     @foreach (var url in urls) *@
@*     { *@
@*         <div>@url</div> *@
@*     } *@
@* </div> *@




<button @onclick="sendEntry">Send entry</button>


@foreach (var nodeData in allNodeData)
{
    <div>

        @if (nodeData is not null)
        {

            <h2>Node @nodeData.Id</h2>
            <div>
                @nodeData.Status
            </div>
            <div>
                Term @nodeData.Term
            </div>
            <div>
                Leader is Node @nodeData.CurrentTermLeader
            </div>

            var timeoutRemaining = nodeData.ElectionTimeout;
            var maxIntervalMilliseconds = 300 * nodeData.NodeIntervalScalar;
            var percentageRemaining = (int)(100 * (decimal)timeoutRemaining / (decimal)maxIntervalMilliseconds);

            @* <div>timeoutRemaining @timeoutRemaining</div>
            <div>timeoutRemaining / maxinterval @(100 * (decimal)timeoutRemaining / (decimal)maxIntervalMilliseconds)</div>
            <div>maxIntervalMilliseconds @maxIntervalMilliseconds</div>
            <div>percentage remaining @percentageRemaining</div>
            <div>Node Interval scalar: @nodeData.NodeIntervalScalar</div> *@

            <div style="width: 100%; max-width: 300px;">
                <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow=@(Math.Abs(timeoutRemaining))
                    aria-valuemin="0" aria-valuemax="@(maxIntervalMilliseconds)">
                    <div class="progress-bar bg-dark-subtle" style="width: @percentageRemaining%;"></div>
                </div>
            </div>
        }
    </div>
}





@code {
    string userInputKey = "";
    string userInputValue = "";
    string[] urls = Environment.GetEnvironmentVariable("NODE_URLS").Split(',');

    NodeData[] allNodeData = new NodeData[3];
    private Timer? timer;


    protected override void OnInitialized()
    {
        timer = new Timer(async _ =>
        {
            await FetchData();
            await InvokeAsync(StateHasChanged);
        }, null, 0, 50);
    }

    private async Task FetchData()
    {
        var newNodeData = new NodeData[3];
        newNodeData[0] = await NodeDataService.GetDataFromApi1();
        newNodeData[1] = await NodeDataService.GetDataFromApi2();
        newNodeData[2] = await NodeDataService.GetDataFromApi3();

        await InvokeAsync(() =>
        {
            for (int i = 0; i < 3; i++)
            {
                allNodeData[i] = newNodeData[i];
            }
            StateHasChanged();
        });
        @* Console.WriteLine("Data has been fetched by client"); *@
    }

    public void Dispose()
    {
        timer?.Dispose();
    }


    async void sendEntry()
    {
        await NodeDataService.SendEntryToApi1(new RequestAppendEntriesData() { Entry = "What's up?" });
        allNodeData[0] = await NodeDataService.GetDataFromApi1();

    }



    public static string FormatMilliSeconds(double milliSeconds)
    {
        return $"{milliSeconds / 1000.0:F1}";
    }



    string StateClass(Node node)
    {
        if (node.Status == NodeStatus.Leader)
            return "text-primary";
        if (node.Status == NodeStatus.Candidate)
            return "text-warning";
        if (node.Status == NodeStatus.Follower)
            return "text-body-secondary";
        return "";
    }

    string TermClass(Node node)
    {
        var maxTerm = allNodeData.Select(n => n.Term).Max();
        if (maxTerm == node.CurrentTerm)
            return "text-primary";
        return "";
    }


}
