@page "/"
@rendermode InteractiveServer
@using System.Collections.Concurrent
@using RaftLibrary
@inject NodeDataService NodeDataService

@* <div> *@
@*     @foreach (var url in urls) *@
@*     { *@
@*         <div>@url</div> *@
@*     } *@
@* </div> *@
<div class="row">

    @* <div class="col">
    <div>
      <label for="speed">
        Election timeout between @(FormatMilliSeconds(150 * RaftNode.NodeIntervalScalar)) and @(FormatMilliSeconds(300 *
        RaftNode.NodeIntervalScalar)) seconds
        <br>
        <input type="range" id="speed" name="speed" min="1" max="150" @bind:event="oninput"
          @bind=RaftNode.NodeIntervalScalar @onchange=UpdateTimer />
      </label>
    </div>

    <div>
      <label for="NetworkRequestDelay">
        Network Delay @FormatMilliSeconds(RaftSimulationNode.NetworkRequestDelay) seconds
        <br>
        <input type="range" id="NetworkRequestDelay" name="NetworkRequestDelay" min="10" max="10000"
          @bind:event="oninput" @bind=RaftSimulationNode.NetworkRequestDelay />
      </label>
    </div>
  </div> *@
</div>


<div class="col">
    <div class="border p-3 rounded-3">
        <label>
            Key <input class="form-control" @bind=userInputKey />
        </label>
        <label>
            Value <input class="form-control" @bind=userInputValue />
        </label>
        <hr>
        @foreach (var nodeData in allNodeData)
        {
            @if (nodeData is not null)
            {
                <button class="btn btn-outline-primary mx-1" @onclick="() => SendCommand(nodeData.Id)">Send to Node
                    @nodeData.Id</button>
            }
        }
        <br>
        <div>
            @commandStatus
        </div>
    </div>
</div>

<div class="row">
    @foreach (var nodeData in allNodeData)
    {
        <div class="col">

            @if (nodeData is not null)
            {

                <div class="d-flex justify-content-between">
                    <h3>
                        Node @nodeData.Id
                    </h3>
                    @* @if (nodeData.SimulationRunning)
                    {
                         <button class="btn btn-outline-danger" @onclick="() => StopNode(nodeData.Id)">Stop Node @nodeData.Id</button>
                    }
                    else
                    {
                        <button class="btn btn-outline-primary" @onclick="() => ResumeNode(nodeData.Id)">Start Node</button>
                    } *@
                </div>
                <div>
                    Role: @nodeData.Status
                </div>
                <div>
                    Term: @nodeData.Term
                </div>
                <div>
                    Node @nodeData.CurrentTermLeader is the leader
                </div>

                var timeoutRemaining = nodeData.ElectionTimeout;
                var maxIntervalMilliseconds = 300 * nodeData.NodeIntervalScalar;
                var percentageRemaining = (int)(100 * (decimal)timeoutRemaining / (decimal)maxIntervalMilliseconds);

                <div style="width: 100%; max-width: 300px;">
                    <div class="progress" role="progressbar" aria-label="Basic example"
                        aria-valuenow=@(Math.Abs(timeoutRemaining)) aria-valuemin="0"
                        aria-valuemax="@(maxIntervalMilliseconds)">
                        <div class="progress-bar bg-dark-subtle" style="width: @percentageRemaining%;"></div>
                    </div>
                </div>


                <div class="bg-body-secondary my-3 p-1 rounded-3">
                    <div>@(nodeData.Log?.Count ?? 0)</div>
                    <strong>LOG</strong>
                    @foreach (var (log, index) in nodeData.Log?.Select((l, i) => (l, i)))
                    {
                        <div class=@(index <= nodeData.CommittedEntryIndex ? "text-success" : "")>
                            @log.Term - @log.Command.Key: @log.Command.Value
                        </div>
                    }
                </div>

                <div class="bg-body-secondary my-3 p-1 rounded-3">
                    <div>@nodeData.StateMachineState</div>
                    <strong>STATE</strong>
                    @if (nodeData.StateMachineState is not null)
                    {
                        @foreach (var entry in nodeData.StateMachineState)
                        {
                            <div>@entry.Key: @entry.Value</div>
                        }
                    }
                </div>


            }
        </div>
    }
</div>


@code {
    string userInputKey = "";
    string userInputValue = "";
    string commandStatus = "";
    string[] urls = Environment.GetEnvironmentVariable("NODE_URLS").Split(',');

    NodeData[] allNodeData = new NodeData[3];
    private Timer? timer;


    protected override void OnInitialized()
    {
        timer = new Timer(async _ =>
        {
            await FetchData();
            await InvokeAsync(StateHasChanged);
        }, null, 0, 50);
    }

    private async Task FetchData()
    {
        var newNodeData = new NodeData[3];
        newNodeData[0] = await NodeDataService.GetDataFromApi1();
        newNodeData[1] = await NodeDataService.GetDataFromApi2();
        newNodeData[2] = await NodeDataService.GetDataFromApi3();

        await InvokeAsync(() =>
        {
            for (int i = 0; i < 3; i++)
            {
                allNodeData[i] = newNodeData[i];
            }
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    public static string FormatMilliSeconds(double milliSeconds)
    {
        return $"{milliSeconds / 1000.0:F1}";
    }

    string StateClass(Node node)
    {
        if (node.Status == NodeStatus.Leader)
            return "text-primary";
        if (node.Status == NodeStatus.Candidate)
            return "text-warning";
        if (node.Status == NodeStatus.Follower)
            return "text-body-secondary";
        return "";
    }
    string TermClass(Node node)
    {
        var maxTerm = allNodeData.Select(n => n.Term).Max();
        if (maxTerm == node.CurrentTerm)
            return "text-primary";
        return "";
    }

    async Task SendCommand(int destinationId)
    {
        int dest;
        var destNode = allNodeData.FirstOrDefault(n => n.Id == destinationId);
        commandStatus = "sending";
        if (destNode != null) //used copilot to make null check
        {
            dest = destNode.Id;
        }
        else
        {
            commandStatus = "Node not found";
            return;
        }

        var command = new ClientCommandData(
        type: ClientCommandType.Set,
        key: userInputKey,
        value: userInputValue
        );

        await NodeDataService.SendCommand(command, dest);
    }




}
